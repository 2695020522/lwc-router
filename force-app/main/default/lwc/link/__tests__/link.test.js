import {createElement} from 'lwc';
import Link from 'c/link';
import {REGISTER_ROUTER_EVENT_NAME, RouterWrapper} from 'c/lwcRouterUtil';

describe('c-link', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    // it('TODO: test case generated by CLI command, please fill in test logic', () => {
    //     const element = createElement('c-link', {
    //         is: Link
    //     });
    //     document.body.appendChild(element);
    //     expect(1).toBe(2);
    // });

    // TODO:
    // This test validates that we fired the registration event which is good, but it's
    // not idea because it can't validate that we passed a callback.  The dispatchEvent
    // method wraps the callback in another function so the detail payload is a function even
    // if we don't include the expected callback.
    it('should register a callback to handle navigation events from the router', () => {
        const handler = jest.fn();
        const element = createElement('c-link', {
            is: Link
        });
        element.addEventListener(REGISTER_ROUTER_EVENT_NAME, handler);
        document.body.appendChild(element);

        return Promise.resolve().then(() => {
            expect(handler).toHaveBeenCalled();
            expect(handler.mock.calls[0][0].detail).toEqual(expect.any(Function));
        });
    });

    it('should subscribe to router navigation events', () => {

    });
});